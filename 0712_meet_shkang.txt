저는 오늘 뭘 설명할거냐..

[데이터베이스 개요?]
- 데이터베이스가 뭐지?
--> 개념적으로 접근해보자. 데이터베이스라는건 데이터를 구조화/정규화 저장, 관리를 하기 위한 시스템
---> DB management system / DBMS 를 이용해서 데이터베이스를 쉽고 편하고 다양한 기능을 통해서 데이터베이스를 잘 관리하기 위한 시스템

- 데이터베이스를 크게 분류해보자
-- 관계형 데이터베이스 (Relational database)
---> 데이터는 테이블 형태로 관리/ SQL 이용해서 데이터를 핸들링 한다

-- 비관계형 데이터베이스 (NoSQL database)
---> 데이터는 테이블 형태 외의 다양한 형태로 관리(json 포맷 field:value/그래프데이터 등...) /(MongoDB-/분산형 Apache 카산드라) 


QUIZ) 요새 Bigdata 라는 말 들어봤음?
--> 전통적인 데이터 처리 프로그램으로 핸들링 하기 힘든 데이터들 (ex: OTT/스트리머의 실시간 스트리밍 데이터들 같은거) 
--- 데이터의 규모(volumn) : 방대함
--- 속도 : 데이터가 생성되는 속도/소비하는 속도 - 빠르다(스트리밍 데이터)
--- 데이터의 형태가 굉장히 다양 : 구조적인 데이터(테이블)/ 반구조적인 데이터(json)/비구조적인 데이터(동영상)

- 관계형 모델 ?
-- 관계형 모델이란 뭘까?
---> 데이터베이스의 여러 모델이 있을텐데 그중 하나. 결국은 데이터베이스의 모델 종류중 한가지.
---> 데이터를 테이블형태로 저장하고, 생성한 테이블들의 관계를 정의해서 데이터를 구성하는 모델.

-- 관계형 모델 특징
--- 데이터 독립성 : 물리적/논리적 데이터 독립성 제공 (데이터 블록(실제 데이터를 저장하는 물리적 공간) -> 익스텐트(Extent) -> 데이터 세그먼트 / 테이블 -> 테이블스페이스) 
--- 데이터 무결성 : 데이터의 정확성과 일관성을 유지. (ex: pk가 있는 열은 데이터의 unique를 보장해야 함)
--- SQL 사용 : 구조적 질의 언어를 사용해 데이터를 정의, 조작, 검색한다 (DDL/DML/TCL)
--- entity의 관계성 : 테이블 간의 관계를 정의하고, 데이터를 결합하거나 핸들링한다

-- 관계형모델에서 많이 언급되는 개념
--- Schema : 데이터베이스의 구조를 정의함
--- table  : 데이터를 row/column 형태로 저장하는 구조(entity)
--- row    : 테이블 내의 record 를 나타냅니다. ㅇㅇ record는 각 column 에 해당하는 값을 가지고 있죠.
--- column : 테이블 내의 데이터의 속성. 고유한 이름하고 타입을 가지고 있음
--- key    : row를 식별할수 있는 column 혹은 컬럼의 집합. (PK/FK) 


이론적인 내용 OK.
그러면 직접 본인장비에서 위에서 설명한 내용들 직접 예시로 해봅시다.
직접 실습하자....


- 실제 상황을 가정하고 그거에 맞춰서 실제로 만져보자
-- 예시를 위한 상황을 가정
---> 인터넷 의류 쇼핑몰을 운영하고 있음. 사장입니다.
---> 근데 내가 지금 팔고있는 의류는 총 5가지 (티셔츠, 바지, 양말, 신발, 모자)
---> 쇼핑몰에 가입한 회원들도 있어야 겠죠? 
---> 회원들은 쇼핑몰에서 판매하는 의류목록을 보고 물건을 사겠죠?
---> 사장은 회원들이 주문한 주문목록을 확인하겠죠. 물건을 준비하고 배송을 진행하겠죠.

-- 요구사항 
---> 쇼핑몰 회원은 여러개 물품을 주문할 수 있다.
---> 회원이 주문한 물품에 대한 데이터는 따로 관리된다.
---> 사장은 주문 건을 확인해서, 각 주문건에 대한 상태를 '준비', '배송', '완료' 상태로 관리한다.
---> 회원의 정보 (고객번호/이름/나이)
---> 물품의 정보 (물품번호/물품명/설명) 
---> 회원정보와 물품정보 사이에는 관계성이 존재해야 되요. 관계성에 대한 부분을 아래 테이블에서 정의 할거에요
     주문목록의 정보 (주문번호/물품번호/고객번호/고객이름/주문상태) 


- E-R 모델을 이용한 데이터베이스설계
-- Entity - Relationship 모델 개념
--- 엔티티 : 데이터베이스에서 저장해야할 object
--- 속성 (Attribute) : 엔티티의 특성이나 정보(column)
--- Relationship : 엔티티간의 관계. 연관성

- E-R 모델을 이용한 데이터베이스설계 과정
1) 요구사항 수집 및 분석
2) E-R 다이어그램 작성
- CUSTOM_LIST  : 1명의 고객은 여러개의 물건을 주문할 수 있지
- PRODUCT_LIST : 1개의 물건은 여러 고객한테 판매될 수 있음
- ORDER_LIST   : CUSTOM_LIST (eneity) 와 PRODUCT_LIST (entity) 간의 관계(N)

-- CUSTOM_LIST
--- 고객번호(유니크한 값)
--- 이름    (유니크한 값)
--- 나이

-- PRODUCT_LIST
--- 물품번호(유니크한 값)
--- 물품명
--- 설명

-- ORDER_LIST
--- 주문번호(유니크한 값)
--- 물품번호(물품번호는 PRODUCT_LIST 의 물품번호를 따를거에요)
--- 고객번호(고객번호는 CUSTOM_LIST 의 고객번호를 따를거에요)
--- 고객이름(고객이름는 CUSTOM_LIST 의 이름를 따를거에요)
--- 주문상태(주문이 들어온 경우에는, 주문상태가 존재해야 됩니다)

3)  E-R 다이어그램에서 명시한 내용을 바탕으로 스키마 변환
create table  CUSTOM_LIST(
고객번호 primary key (유니크한 값)
이름    (유니크한 값)
나이
);

-- PRODUCT_LIST
--- 물품번호(유니크한 값)
--- 물품명
--- 설명

-- ORDER_LIST
--- 주문번호(유니크한 값)
--- 물품번호(물품번호는 PRODUCT_LIST 의 물품번호를 따를거에요)
--- 고객번호(고객번호는 CUSTOM_LIST 의 고객번호를 따를거에요)
--- 고객이름(고객이름는 CUSTOM_LIST 의 이름를 따를거에요)
--- 주문상태(주문이 들어온 경우에는, 주문상태가 존재해야 됩니다)

4) 3번에서 만든거 가지고실제 DBMS상에서  데이터베이스를 만들거다
----> DB 접속해서  DBMS 상에서  실제로 쿼리를 수행해서 데이터베이스를 만든다



- 고객정보
create table customer_list (
customer_id number,
customer_name varchar2(20),
age number
);
alter table customer_list add constraint pk_customer_list primary key (customer_id, customer_name);

- 물품정보
create table product_list (
product_id number primary key,
product_name varchar2(30),
description varchar2(100) 
);

- 주문목록
create table order_list (
order_id number primary key, 
order_product_id number,
order_customer_id number,
order_customer_name varchar2(20),
status varchar2(30) default 'prepare' not null 
);
alter table order_list add constraint fk_product_list foreign key (order_product_id) references customer_list (product_id);
alter table order_list add constraint fk_customer_list foreign key (order_customer_id, order_customer_name) references customer_list (customer_id, customer_name);


=====================================================================

-- 방금전에 테이블 만드는 sql 파일 따로 만들고, 테이블 생성했고 commit 을 안했는데 왜 테이블이 롤백되지 않았을까?
-- SQL을종류에 따라 분류를 하면
--- DML : (Insert/Update/Delete)
--- DDL : (Create/Alter table)
--- TCL : (COMMIT/ROLLBACK)
